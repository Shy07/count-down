{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","day","setDay","hour","setHour","min","setMinute","second","setSecond","ms","setMS","available","setAvailable","stage","setStage","meteor","setMeteor","endAt","df","parse","useEffect","handler","setInterval","fDate","result","now","Date","parts","forEach","p","i","uP","charAt","toUpperCase","slice","t","push","length","futureToNow","d","h","m","s","numeral","Math","floor","format","isAfter","clearInterval","visible","random","setTimeout","className","style","marginBottom","onClick","window","location","href","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e18ec0a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport df from 'date-fns'\nimport numeral from 'numeral'\n\nimport './sass/style.scss'\n\nconst futureToNow = fDate => {\n  const result = []\n  const now = new Date()\n  const parts = ['day', 'hour', 'minute', 'second', 'millisecond']\n\n  parts.forEach((p, i) => {\n    const uP = p.charAt(0).toUpperCase() + p.slice(1)\n    const t = df[`differenceIn${uP}s`](fDate, now)\n    result.push(t)\n    if (i < parts.length) { fDate = df[`sub${uP}s`](fDate, t) }\n  })\n\n  return result\n}\n\nconst App = () => {\n  const [day, setDay] = useState(0)\n  const [hour, setHour] = useState(0)\n  const [min, setMinute] = useState(0)\n  const [second, setSecond] = useState(0)\n  const [ms, setMS] = useState(0)\n  const [available, setAvailable] = useState(false)\n  const [stage, setStage] = useState(0)\n  const [meteor, setMeteor] = useState(true)\n\n  const endAt = df.parse('2019-10-19 22:19:00') // df.addSeconds(new Date(), 12)\n\n  useEffect(() => {\n    const handler = setInterval(() => {\n      const [d, h, m, s, ms] = futureToNow(endAt)\n      setDay(d)\n      setHour(h)\n      setMinute(m)\n      setSecond(s)\n      setMS(numeral(Math.floor(ms / 1000 * 100)).format('00'))\n\n      if (d + h + m === 0 && s <= 11) setStage(1)\n      if (d + h + m === 0 && s <= 10) setStage(2)\n      if (d + h + m === 0 && s <= 0) {\n        setStage(3)\n        setAvailable(true)\n      }\n\n      if (df.isAfter(new Date(), endAt)) {\n        clearInterval(handler)\n        setDay(0)\n        setHour(0)\n        setMinute(0)\n        setSecond(0)\n        setMS(0)\n      }\n    }, 10)\n    return () => clearInterval(handler)\n  }, [])\n\n  useEffect(() => {\n    if (second % 20 === 0) {\n      const visible = Math.random() * 100 > 60\n      setMeteor(visible)\n      if (visible) setTimeout(() => setMeteor(false), 15000)\n    }\n  }, [second])\n\n  const handleClick = () => {\n    if (available) window.location.href = 'https://teserax.com'\n  }\n\n  return (\n    <div className='App'>\n      {stage < 2 ? (\n        <div className='lines'>\n          {meteor ? (\n            <>\n              <div className='line' />\n              <div className='line' />\n              <div className='line' />\n            </>\n          ) : null}\n        </div>\n      ) : null}\n      <header className='App-header'>\n        {stage < 3 ? (\n          stage > 1 ? (\n            <p style={{ marginBottom: '1vh' }} className={`transition-1s ${stage > 0 ? '' : 'opacity-0'}`}>\n              <i className='bigger'>{ second }</i>\n            </p>\n          ) : (\n            <p style={{ marginBottom: '1vh' }} className={`transition-1s ${stage > 0 ? 'opacity-0' : ''}`}>\n              <small>Coming soon</small><br />\n              <span><i>{ day }</i> : <i>{ hour }</i> : <i>{ min }</i> : </span>\n              <i>{ second }</i>\n              <span> : <i>{ ms }</i></span>\n              <br />\n              <small className='tiny'>Something in the air...</small><br />\n            </p>\n          )\n        ) : null}\n        <button className={`${stage === 3 ? '' : 'opacity-0'} ${available ? 'available' : ''}`} onClick={handleClick}>\n          OPEN THE DOOR TO A NEW WORLD\n        </button>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}